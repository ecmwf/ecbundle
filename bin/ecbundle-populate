#!/usr/bin/env python3

# (C) Copyright 2020- ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""
Script to generate a CMake bundle from bundle file
"""

import os
import sys
from argparse import SUPPRESS, ArgumentParser, RawTextHelpFormatter

sys.path.insert(0, os.path.realpath(os.path.dirname(os.path.realpath(__file__))+'/..'))
from ecbundle.bundle import Bundle
from ecbundle.logging import DEBUG, colors, error, logger, success
from ecbundle.populate import Populator
from ecbundle.util import Timer, fullpath


def get_src_dir():
    src_dir = "source"
    for i, arg in enumerate(sys.argv):
        if arg.startswith("--src-dir="):
            src_dir = arg.split("=")[1]
        elif arg.startswith("--src-dir"):
            src_dir = sys.argv[i + 1]
    src_dir = fullpath(src_dir)
    return src_dir


def get_populate_options():
    bundle = Bundle(get_src_dir() + '/bundle.yml')
    return bundle.populate_options()


def main():

    # Parse arguments
    parser = ArgumentParser(description=__doc__,
                            formatter_class=RawTextHelpFormatter)

    # --------------------------------------------------------------------------
    # Parse common subcommands
    # --------------------------------------------------------------------------
    parser.add_argument('--no-colour', '--no-color',
                        help='Disable color output',
                        action='store_true')

    parser.add_argument('--verbose', '-v',
                        help='Verbose output',
                        action='store_true')

    parser.add_argument('--dryrun',
                        help='Review actions without executing them',
                        action='store_true')
    parser.add_argument('--dry-run',
                        help=SUPPRESS,
                        action='store_true')

    parser.add_argument('--src-dir',
                        help='Directory containing repositories', default='source')

    parser.add_argument('--artifacts-dir',
                        help='Location where downloaded data will be stored (default={{src-dir}}/artifacts')

    try:
        typemap = {'str': str, 'int': int}
        options = get_populate_options()
        for opt in options:
            arg_opts = {}
            if opt.type():
                if opt.type() in typemap:
                    arg_opts['type'] = typemap[opt.type()]
            else:
                arg_opts['action'] = 'store_true'
            parser.add_argument('--' + opt.name(), help=opt.help(), **arg_opts)

    except IOError:
        pass

    # --------------------------------------------------------------------------

    # Close parser and populate variable args
    args = parser.parse_args()

    # Explicitly disable coloured logs
    if args.no_colour:
        colors.disable()

    # Log everything, including commands executed
    if args.verbose:
        logger.setLevel(DEBUG)

    timer = Timer()

    errcode = 0
    if Populator(**vars(args)).create() != 0:
        errcode = 1 # error§

    success("\nTime elapsed for populating cache: %s\n" % timer.elapsed_str())

    if errcode == 1:
        error("\n!!! Errors occured !!!")

    return errcode

if __name__ == '__main__':
    sys.exit(main())
